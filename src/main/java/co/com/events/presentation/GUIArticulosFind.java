/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.com.events.presentation;

import co.com.events.domain.entities.Articulo;
import co.com.events.domain.entities.Evento;
import co.com.events.service.ArticuloService;
import co.com.events.service.EventService;
import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Libardo Pantoja, Julio A. Hurtado
 */
public class GUIArticulosFind extends javax.swing.JDialog {
    private ArticuloService articuloService;
    

    /**
     * Creates new form GUIProductsFind
     */
    public GUIArticulosFind(java.awt.Frame parent, boolean modal,ArticuloService articuloService) {
        super(parent, modal);
        initComponents();
        initializeTable();
        this.articuloService = articuloService;
        setLocationRelativeTo(null); //centrar al ventana
    }
    
    private void initializeTable() {
        tblArticulos.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Id", "Titulo", "Resumen"," PalabrasC","IdAutor","IdConferencia","PDF"
                }
        ));
    }
private void fillTable(List<Articulo> listArticulo) {
    initializeTable();
    DefaultTableModel model = (DefaultTableModel) tblArticulos.getModel();
    

    // Asegúrate de que el modelo tenga el número correcto de columnas.
    Object rowData[] = new Object[7];
    
    for (Articulo articulo : listArticulo) {
        rowData[0] = articulo.getArticuloId();
        rowData[1] = articulo.getTitulo();
        rowData[2] = articulo.getResumen();
        rowData[3] = articulo.getPalabrasClave();
        rowData[4] = articulo.getAutorId();
        rowData[5] = articulo.getConferenciaId();
        rowData[6] = articulo.getPdfFile();
        // Obtener la ruta del PDF
   //     String pdfPath = getPDFPath(articulo.getNombrePdf());
        //rowData[6] = pdfPath;
        
        model.addRow(rowData);
    }
}

// Método para obtener la ruta del PDF
/*private String getPDFPath(String articuloId) {
    // Aquí debes implementar la lógica para obtener la ruta del PDF
    // Esta es solo una implementación de ejemplo
    String baseDirectory = "C:/Users/Unicauca/Downloads/";
    return baseDirectory + "ensayo.pdf";
}/*

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        pnlCenter = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblArticulos = new javax.swing.JTable();
        pnlNorth = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        rdoId = new javax.swing.JRadioButton();
        rdoName = new javax.swing.JRadioButton();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnSearchAll = new javax.swing.JButton();
        rdoIdConferencia = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        btnClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Búsqueda de productos");

        pnlCenter.setLayout(new java.awt.BorderLayout());

        tblArticulos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblArticulos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblArticulosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblArticulos);

        pnlCenter.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnlCenter, java.awt.BorderLayout.CENTER);

        jLabel1.setText("Buscar por:");

        buttonGroup1.add(rdoId);
        rdoId.setSelected(true);
        rdoId.setText("Id");
        rdoId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoIdActionPerformed(evt);
            }
        });

        buttonGroup1.add(rdoName);
        rdoName.setText("Nombre del Articulo");
        rdoName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoNameActionPerformed(evt);
            }
        });

        txtSearch.setPreferredSize(new java.awt.Dimension(62, 32));

        btnSearch.setText("Buscar");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnSearchAll.setText("Buscar Todos");
        btnSearchAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchAllActionPerformed(evt);
            }
        });

        buttonGroup1.add(rdoIdConferencia);
        rdoIdConferencia.setText("Id Conferencia ");
        rdoIdConferencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoIdConferenciaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlNorthLayout = new javax.swing.GroupLayout(pnlNorth);
        pnlNorth.setLayout(pnlNorthLayout);
        pnlNorthLayout.setHorizontalGroup(
            pnlNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNorthLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(rdoId)
                .addGap(18, 18, 18)
                .addComponent(rdoName)
                .addGap(3, 3, 3)
                .addComponent(rdoIdConferencia)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(btnSearch)
                .addGap(5, 5, 5)
                .addComponent(btnSearchAll))
        );
        pnlNorthLayout.setVerticalGroup(
            pnlNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNorthLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(pnlNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdoId)
                    .addComponent(jLabel1)
                    .addComponent(rdoName)
                    .addComponent(rdoIdConferencia)))
            .addGroup(pnlNorthLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(pnlNorthLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(btnSearch))
            .addGroup(pnlNorthLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(btnSearchAll))
        );

        getContentPane().add(pnlNorth, java.awt.BorderLayout.PAGE_START);

        btnClose.setText("Cerrar");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        jPanel1.add(btnClose);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnSearchAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchAllActionPerformed
        fillTable(articuloService.findAllArticulos());
    }//GEN-LAST:event_btnSearchAllActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
  // Obtenemos el texto de búsqueda y eliminamos espacios en blanco
    String searchText = txtSearch.getText().trim();
    String outputFilePath = txtSearch.getText().trim(); // Obtener la ruta de salida del PDF
    
    // Verificamos si se ha seleccionado la opción de búsqueda por ID
    if (rdoId.isSelected()) {
        try {
            // Intentamos convertir el texto de búsqueda a un número Long (ID)
            Long id = Long.parseLong(searchText);
            // Buscamos el artículo por ID usando el servicio de artículos
            Articulo articulo = articuloService.findArticuloById(id, outputFilePath);
            if (articulo != null) {
                // Si encontramos el artículo, lo pasamos a la tabla
                fillTable(List.of(articulo)); // Pasamos una lista que contiene un solo artículo
            } else {
                // Si no encontramos ningún artículo, pasamos una lista vacía
                Messages.showMessageDialog("No hay artículos con ese ID", "Atención");
                fillTable(List.of());
            }
        } catch (NumberFormatException e) {
            // Si el texto de búsqueda no es un número válido, mostramos una lista vacía
            Messages.showMessageDialog("El ID debe ser un número válido.", "Error");
            fillTable(List.of());
        }
    } 
    // Verificamos si se ha seleccionado la opción de búsqueda por nombre
    else if (rdoName.isSelected()) {
        // Buscamos artículos por nombre usando el servicio de artículos
        Articulo articulo = articuloService.findArticuloByName(searchText);
        if (articulo != null) {
            // Si encontramos el artículo, lo pasamos a la tabla
            fillTable(List.of(articulo)); // Pasamos una lista que contiene un solo artículo
        } else {
            Messages.showMessageDialog("No hay artículos con ese nombre", "Atención");
            fillTable(List.of());
        }
    }
    // Verificamos si se ha seleccionado la opción de búsqueda por ID de conferencia
    else if (rdoIdConferencia.isSelected()) {
        try {
            // Intentamos convertir el texto de búsqueda a un número Long (ID de categoría)
            Long conferenciaId = Long.parseLong(searchText);
            // Buscamos artículos por ID de conferencia usando el servicio de artículos
            List<Articulo> articulos = this.articuloService.findArticulosByConferenciaId(conferenciaId);
            if (!articulos.isEmpty()) {
                // Si encontramos artículos, los pasamos a la tabla
                fillTable(articulos); // Pasamos la lista de artículos
            } else {
                Messages.showMessageDialog("No hay artículos con esa conferencia", "Atención");
                fillTable(List.of());
            }
        } catch (NumberFormatException e) {
            // Si el texto de búsqueda no es un número válido, mostramos una lista vacía
            Messages.showMessageDialog("El ID de la conferencia debe ser un número válido.", "Error");
            fillTable(List.of());
        }
    }
    txtSearch.setText(""); // Limpiar el campo de búsqueda
       
    }//GEN-LAST:event_btnSearchActionPerformed
    
    private void rdoNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoNameActionPerformed

    private void rdoIdConferenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoIdConferenciaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoIdConferenciaActionPerformed

    private void rdoIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoIdActionPerformed

    private void tblArticulosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblArticulosMouseClicked
  if (evt.getClickCount() == 1) { // Check for a single click
        int row = tblArticulos.getSelectedRow();
        if (row >= 0) {
            // Obtener el id del artículo de la tabla (asumiendo que está en la primera columna)
            int articuloId = Integer.parseInt(tblArticulos.getValueAt(row, 0).toString());

            // Obtener el PDF del servicio
            byte[] pdfData = articuloService.obtenerPdfPorArticuloId(articuloId);

            // Abrir el PDF desde los datos obtenidos
            try {
                openPdfFromDatabase(pdfData);
            } catch (IOException e) {
                Messages.showMessageDialog("Error al abrir el PDF: " + e.getMessage(), "Error");
            }
        }
    }
    
    }//GEN-LAST:event_tblArticulosMouseClicked

    private void openPdfFromDatabase(byte[] pdfData) throws IOException {
    if (pdfData != null) {
        // Crear un archivo temporal para almacenar el PDF
        File tempPdfFile = File.createTempFile("articulo_", ".pdf");
        tempPdfFile.deleteOnExit(); // Eliminar el archivo automáticamente al salir

        // Escribir los datos del PDF en el archivo temporal
        try (FileOutputStream fos = new FileOutputStream(tempPdfFile)) {
            fos.write(pdfData);
        }

        // Abrir el archivo PDF
        if (Desktop.isDesktopSupported()) {
            Desktop.getDesktop().open(tempPdfFile);
        } else {
            Messages.showMessageDialog("Desktop no es compatible. No se puede abrir el PDF.", "Error");
        }
    } else {
        Messages.showMessageDialog("No hay datos de PDF disponibles.", "Error");
    }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearchAll;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlCenter;
    private javax.swing.JPanel pnlNorth;
    private javax.swing.JRadioButton rdoId;
    private javax.swing.JRadioButton rdoIdConferencia;
    private javax.swing.JRadioButton rdoName;
    private javax.swing.JTable tblArticulos;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
